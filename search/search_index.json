{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Principal"},{"location":"about/","text":"Sitio creado por Pedro \u00c1ngel Casti\u00f1eira Ruiz para la clase de Implantaci\u00f3n de Aplicaciones Web.","title":"Acerca de"},{"location":"iaw-https-docker/","text":"HTTPS con Docker y Docker-compose Instalando una aplicaci\u00f3n web y a\u00f1adiendo un certificado HTTPS con Docker. Preparando la m\u00e1quina Necesitamos una m\u00e1quina con al menos 2GB de RAM y con los puertos HTTP(80), HTTPS(443), MySQL(3306) y el 8080 abiertos. Preparando nuestro dominio Creamos el nombre de dominio, vamos a la p\u00e1gina Freenom , nos registramos e iniciamos sesi\u00f3n, cuando estemos logueados vamos a Servicios>Registrar nuevo dominio. Se nos abrir\u00e1 una nueva p\u00e1gina en la que ingresaremos el nombre de dominio que queremos crear y pulsaremos el bot\u00f3n para comprobar la disponibilidad. Si est\u00e1 libre, podremos elegir una lista de dominios, cuando seleccionemos el que queremos, en la parte superior saldr\u00e1 que tenemos un dominio a\u00f1adido junto con un bot\u00f3n llamado checkout, le damos y pasamos a la pantalla de \"compra\". Sobre el tiempo que estar\u00e1 el dominio disponible, seleccionamos 1 mes ya que esto es una prueba. Le damos a continuar, en la pantalla de confirmaci\u00f3n aceptamos los t\u00e9rminos y condiciones de uso, y le damos a completar encargo. Cuando termine este proceso, volvemos a la ventana de servicios y vamos a Mis dominios, dentro veremos que ya podemos utilizar el dominio que hemos reservado antes, vamos a sus opciones (bot\u00f3n Manage Domain), una vez dentro vamos a la secci\u00f3n Manage Freenom DNS. En la nueva p\u00e1gina que se nos abre, deberemos de crear 2 registros DNS de tipo A que apunten a nuestra m\u00e1quina de Amazon, en mi caso los registros han quedado de la siguiente manera. Trabajando con Docker y Docke-compose Actualizamos los repositorios del sistema e instalamos docker y docker-compose y lo configuramos igual que hemos hecho en pr\u00e1cticas anteriores. Cuando hayamos hecho este paso crearemos el archivo YML, este archivo consta de lo siguiente: version: '3.4' services: mysql: image: mysql command: --default-authentication-plugin=mysql_native_password ports: - 3306:3306 environment: - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} - MYSQL_DATABASE=${MYSQL_DATABASE} - MYSQL_USER=${MYSQL_USER} - MYSQL_PASSWORD=${MYSQL_PASSWORD} volumes: - mysql_data:/var/lib/mysql networks: - backend-network restart: always phpmyadmin: image: phpmyadmin ports: - 8080:80 environment: - PMA_ARBITRARY=1 networks: - backend-network - frontend-network restart: always depends_on: - mysql prestashop: image: prestashop/prestashop environment: - DB_SERVER=mysql volumes: - prestashop_data:/var/www/html networks: - backend-network - frontend-network restart: always depends_on: - mysql https-portal: image: steveltn/https-portal:1 ports: - 80:80 - 443:443 restart: always environment: DOMAINS: 'rcapsecuredocker.tk -> http://prestashop:80' #STAGE 'production' # Utilizar cuando el sitio est\u00e9 listo STAGE: 'staging' # Utilizar para pruebas # FORCE_RENEW: 'true' networks: - frontend-network volumes: mysql_data: prestashop_data: networks: backend-network: frontend-network: El archivo .yml estar\u00e1 disponible en el repositorio. Es importante que hasta que no tengamos claro que no tengamos que nuestro contenedor est\u00e1 listo para lanzarlo de forma profesional a Internet tenemos que utilizar el STAGE de pruebas denominado \"staging\", cuando tengamos claro que nuestra infraestructura est\u00e1 preparada, utilizaremos el stage \"production\" podemos incluir en el yml varias lineas de STAGE comentadas de cada tipo, as\u00ed solo tendremos que descomentar la que nos interese utilizar.. El archivo .env con las variables correspondientes estar\u00e1 disponible en el repositorio. Antes de poner en funcionamiento todos los contenedores, tenemos que asegurarnos de que la linea DOMAINS del servicio HTTPS tiene nuestro dominio puesto. Teniendo todo listo lanzamos nuestra infraestructura con el comando docker-compose up -d. Si entramos en el dominio podremos ver que tenemos nuestra aplicaci\u00f3n web bajo una conexi\u00f3n SSL. Cuando hayamos instalado nuestra aplicaci\u00f3n web (en este caso Prestashop) cabe la posibilidad de que tengamos que activar el protocolo SSL desde el panel de administraci\u00f3n, si no nos deja, podemos hacerlo modificando la base de datos. Vamos al PhpMyAdmin y ejecutamos las siguientes instrucciones en el apartado SQL o modificando los valores de forma gr\u00e1fica. UPDATE ps_configuration SET value=1 WHERE name=\"PS_SSL_ENABLED\"; UPDATE ps_configuration SET value=1 WHERE name=\"PS_SSL_ENABLED_EVERYWHERE\"; Con estos cambios hechos si entramos a nuestro sitio web Prestashop podremos observar que ya es un sitio completamente seguro. En cada aplicaci\u00f3n web este proceso puede ser distinto. Enlace a mi sitio prestashop rcapsecuredocker.tk","title":"iaw-https-docker"},{"location":"iaw-https-docker/#https-con-docker-y-docker-compose","text":"Instalando una aplicaci\u00f3n web y a\u00f1adiendo un certificado HTTPS con Docker.","title":"HTTPS con Docker y Docker-compose"},{"location":"iaw-https-docker/#preparando-la-maquina","text":"Necesitamos una m\u00e1quina con al menos 2GB de RAM y con los puertos HTTP(80), HTTPS(443), MySQL(3306) y el 8080 abiertos.","title":"Preparando la m\u00e1quina"},{"location":"iaw-https-docker/#preparando-nuestro-dominio","text":"Creamos el nombre de dominio, vamos a la p\u00e1gina Freenom , nos registramos e iniciamos sesi\u00f3n, cuando estemos logueados vamos a Servicios>Registrar nuevo dominio. Se nos abrir\u00e1 una nueva p\u00e1gina en la que ingresaremos el nombre de dominio que queremos crear y pulsaremos el bot\u00f3n para comprobar la disponibilidad. Si est\u00e1 libre, podremos elegir una lista de dominios, cuando seleccionemos el que queremos, en la parte superior saldr\u00e1 que tenemos un dominio a\u00f1adido junto con un bot\u00f3n llamado checkout, le damos y pasamos a la pantalla de \"compra\". Sobre el tiempo que estar\u00e1 el dominio disponible, seleccionamos 1 mes ya que esto es una prueba. Le damos a continuar, en la pantalla de confirmaci\u00f3n aceptamos los t\u00e9rminos y condiciones de uso, y le damos a completar encargo. Cuando termine este proceso, volvemos a la ventana de servicios y vamos a Mis dominios, dentro veremos que ya podemos utilizar el dominio que hemos reservado antes, vamos a sus opciones (bot\u00f3n Manage Domain), una vez dentro vamos a la secci\u00f3n Manage Freenom DNS. En la nueva p\u00e1gina que se nos abre, deberemos de crear 2 registros DNS de tipo A que apunten a nuestra m\u00e1quina de Amazon, en mi caso los registros han quedado de la siguiente manera.","title":"Preparando nuestro dominio"},{"location":"iaw-https-docker/#trabajando-con-docker-y-docke-compose","text":"Actualizamos los repositorios del sistema e instalamos docker y docker-compose y lo configuramos igual que hemos hecho en pr\u00e1cticas anteriores. Cuando hayamos hecho este paso crearemos el archivo YML, este archivo consta de lo siguiente: version: '3.4' services: mysql: image: mysql command: --default-authentication-plugin=mysql_native_password ports: - 3306:3306 environment: - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} - MYSQL_DATABASE=${MYSQL_DATABASE} - MYSQL_USER=${MYSQL_USER} - MYSQL_PASSWORD=${MYSQL_PASSWORD} volumes: - mysql_data:/var/lib/mysql networks: - backend-network restart: always phpmyadmin: image: phpmyadmin ports: - 8080:80 environment: - PMA_ARBITRARY=1 networks: - backend-network - frontend-network restart: always depends_on: - mysql prestashop: image: prestashop/prestashop environment: - DB_SERVER=mysql volumes: - prestashop_data:/var/www/html networks: - backend-network - frontend-network restart: always depends_on: - mysql https-portal: image: steveltn/https-portal:1 ports: - 80:80 - 443:443 restart: always environment: DOMAINS: 'rcapsecuredocker.tk -> http://prestashop:80' #STAGE 'production' # Utilizar cuando el sitio est\u00e9 listo STAGE: 'staging' # Utilizar para pruebas # FORCE_RENEW: 'true' networks: - frontend-network volumes: mysql_data: prestashop_data: networks: backend-network: frontend-network: El archivo .yml estar\u00e1 disponible en el repositorio. Es importante que hasta que no tengamos claro que no tengamos que nuestro contenedor est\u00e1 listo para lanzarlo de forma profesional a Internet tenemos que utilizar el STAGE de pruebas denominado \"staging\", cuando tengamos claro que nuestra infraestructura est\u00e1 preparada, utilizaremos el stage \"production\" podemos incluir en el yml varias lineas de STAGE comentadas de cada tipo, as\u00ed solo tendremos que descomentar la que nos interese utilizar.. El archivo .env con las variables correspondientes estar\u00e1 disponible en el repositorio. Antes de poner en funcionamiento todos los contenedores, tenemos que asegurarnos de que la linea DOMAINS del servicio HTTPS tiene nuestro dominio puesto. Teniendo todo listo lanzamos nuestra infraestructura con el comando docker-compose up -d. Si entramos en el dominio podremos ver que tenemos nuestra aplicaci\u00f3n web bajo una conexi\u00f3n SSL. Cuando hayamos instalado nuestra aplicaci\u00f3n web (en este caso Prestashop) cabe la posibilidad de que tengamos que activar el protocolo SSL desde el panel de administraci\u00f3n, si no nos deja, podemos hacerlo modificando la base de datos. Vamos al PhpMyAdmin y ejecutamos las siguientes instrucciones en el apartado SQL o modificando los valores de forma gr\u00e1fica. UPDATE ps_configuration SET value=1 WHERE name=\"PS_SSL_ENABLED\"; UPDATE ps_configuration SET value=1 WHERE name=\"PS_SSL_ENABLED_EVERYWHERE\"; Con estos cambios hechos si entramos a nuestro sitio web Prestashop podremos observar que ya es un sitio completamente seguro. En cada aplicaci\u00f3n web este proceso puede ser distinto.","title":"Trabajando con Docker y Docke-compose"},{"location":"iaw-https-docker/#enlace-a-mi-sitio-prestashop","text":"rcapsecuredocker.tk","title":"Enlace a mi sitio prestashop"}]}